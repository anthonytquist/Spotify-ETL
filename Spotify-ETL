# =============================================================================
# Spotify API
# =============================================================================

import sqlalchemy
import pandas as pd
from sqlalchemy.orm import sessionmaker
import requests
import json
from datetime import datetime
import datetime
import sqlite3

DATABASE_LOCATION = "sqlite:///my_played_tracks.sqlite"
USER_ID = "m63ioh06ic20fb2jo17ijcfin"
TOKEN = "BQCITMyDlLp1ugOTxSUkunoUDe-w-A4djrWZ_Phx9DQ1GfWDF1umiPhz0LqaAz6-RGMMEvObC_NXXXN-68TgMrerVzUXn_QSJSPSMtLvSq5fTx3ggSOIW4Kno9Q9oPNbaUi3t6wV6Dd3aSdq58YtoFu9qbB8xI7R7FxUqqRp"


def check_if_valid_data(df: pd.DataFrame) -> bool: 
    # Check if dataframe is empty
    if df.empty:
        print("No songs downloaded. Finishing execution")
        return False
    
    # Primary Key Checl
    if pd.Series(df["played_at"]).is_unique:
        pass
    else:
        raise Exception("Primary Key Check is violated")
        
    # Check for nulls
    if df.isnull().values.any():
        raise Exception("Null values found")
        
    # Check that all timestamps are of yesterday's date - commented out due to initial load
    yesterday = datetime.datetime.now() - datetime.timedelta(days=1)
    yesterday = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
    
    timestamps = df["timestamp"].tolist()
    for timestamp in timestamps:
        if datetime.datetime.strptime(timestamp, "%Y-%m-%d") != yesterday:
            raise Exception("At least one of the returned songs does not come from within the last 24 hours")
            
    return True
    
if __name__ == "__main__" :
    
    # Extract Part of the ETL process
    
    headers = {
        "Accept" : "application", 
        "Content-Type" : "application/json",
        "Authorization" : "Bearer {token}".format(token=TOKEN)
        }
    
    # Convert time to Unix timestamp in milliseconds
    today = datetime.datetime.now()
    yesterday = today - datetime.timedelta(days=1) #### Production Date
    yesterday_unix_timestamp = int(yesterday.timestamp()) * 1000
    # one_time_load = today - datetime.timedelta(days = 365) ## First Time Load
    # one_time_load_unix_timestamp = int(one_time_load.timestamp()) * 1000
    
    # Download all songs you've listened to "after yesterday", which means in the last 24 hours
    r = requests.get("https://api.spotify.com/v1/me/player/recently-played?after={time}".format(time = yesterday_unix_timestamp), headers = headers) ## Production request
    # r = requests.get("https://api.spotify.com/v1/me/player/recently-played?limit=50".format(time = one_time_load_unix_timestamp), headers = headers) ## One time load request

    data = r.json() 
    
    song_names = []
    artist_names = []
    played_at_list = []
    timestamps = []

    
    # Extracting only the relevant bits of data from the json object
    for song in data["items"]:
        song_names.append(song["track"]["name"])
        artist_names.append(song["track"]["album"]["artists"][0]["name"])
        played_at_list.append(song["played_at"])
        timestamps.append(song["played_at"][0:10])
    
    # Prepare a dictionary in order to turn it into a pandas datafram below
    song_dict = {
        "song_name" : song_names,
        "artist_name" : artist_names, 
        "played_at" : played_at_list,
        "timestamp" : timestamps, 
        }
    
    song_df = pd.DataFrame(song_dict, columns = ["song_name", "artist_name", "played_at", "timestamp"])
    print(song_df) 
    
   # print(song_df)
   
    # Validate 
    if check_if_valid_data(song_df):
      print("Data is valid, proceed to Load stage")
    
    # Load
    engine = sqlalchemy.create_engine(DATABASE_LOCATION)
    conn = sqlite3.connect("my_played_tracks")
    cursor = conn.cursor()
    
    sql_query = """
    CREATE TABLE IF NOT EXISTS my_played_tracks(
        song_name VARCHAR(200),
        artist_name VARCHAR(200),
        played_at VARCHAR(200), 
        timestamp VARCHAR(200), 
        CONSTRAINT primary_key_constraint PRIMARY KEY (played_at)
    )
    """
    
    cursor.execute(sql_query)
    print("Opened database successfully")
    
    try:
        song_df.to_sql("my_played_tracks", engine, index=False, if_exists="append")
    except:
        print("Data already exists in the database")
        
    conn.close()
    print("Close database successfully")
    
    
    
        
        
        
        
        
        
        
        
        
        
        
        
        